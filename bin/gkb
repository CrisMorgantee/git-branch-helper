#!/usr/bin/env bash

# === Define Directories ===
SOURCE="${BASH_SOURCE[0]}"
while [ -L "$SOURCE" ]; do
  DIR="$(cd -P "$(dirname "$SOURCE")" && pwd)"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
SCRIPT_DIR="$(cd -P "$(dirname "$SOURCE")" && pwd)"
ROOT_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"

# === Load Configuration ===
load_config() {
  # Path to the default configuration file
  DEFAULT_CONFIG="$ROOT_DIR/config/gkb.conf"

  # Check if the default configuration file exists
  if [ -f "$DEFAULT_CONFIG" ]; then
    source "$DEFAULT_CONFIG"
  else
    echo "Warning: Default configuration file not found at '$DEFAULT_CONFIG'. Using default settings."
  fi

  # Default variables
  GKB_REMOTE="${GKB_REMOTE:-origin}"
  GKB_CACHE_DURATION="${GKB_CACHE_DURATION:-30}"
  GKB_EXCLUDE_BRANCHES="${GKB_EXCLUDE_BRANCHES:-main|master|develop}"
  CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/gkb"
  mkdir -p "$CACHE_DIR"
  CACHE_FILE="$CACHE_DIR/branch"

  # Load user configuration
  CONFIG_FILE="$HOME/.gkb_config"
  if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
  fi
}

# === Display Help ===
display_help() {
  echo "Usage: gkb [-n] [-a] [-c cache_duration] [-p] [-f] [-h] [-man] [branch_name]"
  echo "Options:"
  echo "  -n     Do not execute 'git pull' after checkout"
  echo "  -a     Execute 'git fetch --all'"
  echo "  -c     Set cache duration in minutes (default $GKB_CACHE_DURATION)"
  echo "  -p     Remove local branches that no longer exist on the remote"
  echo "  -f     Force switch branches even if there are uncommitted changes"
  echo "  -h     Display this help"
  echo "  -man   Show the complete manual"
}

# === Display Manual ===
display_manual() {
  man "$ROOT_DIR/man/gkb.1"
}

# === Parse Options ===
parse_options() {
  SYNC=true
  FETCH_ALL=false
  PRUNE=false
  FORCE=false

  # Check if the first argument is '-man'
  if [[ "$1" == "--man" ]]; then
    display_manual
    exit 0
  fi

  while getopts "nac:hpf" opt; do
    case $opt in
    n) SYNC=false ;;
    a) FETCH_ALL=true ;;
    c) GKB_CACHE_DURATION="$OPTARG" ;;
    h)
      display_help
      exit 0
      ;;
    p) PRUNE=true ;;
    f) FORCE=true ;;
    *)
      display_help
      exit 1
      ;;
    esac
  done
  shift $((OPTIND - 1))
  BRANCH_NAME="$1"
}

# === Check Remote Accessibility ===
check_remote_access() {
  if ! git ls-remote &>/dev/null; then
    echo "Error: The remote repository is not accessible. Please check your network connection."
    exit 1
  fi
}

# === Fetch Updates ===
fetch_updates() {
  if $FETCH_ALL; then
    git fetch --all
  else
    git fetch "$GKB_REMOTE"
  fi
}

# === Prune Branches ===
prune_branches() {
  if $PRUNE; then
    git remote prune "$GKB_REMOTE"
    echo "Orphaned local branches removed."
  fi
}

# === Determine Branch Name ===
determine_branch_name() {
  if [[ -n "$BRANCH_NAME" ]]; then
    BRANCH="$BRANCH_NAME"
  else
    BRANCH=$(git for-each-ref --sort=-committerdate --format='%(refname:short)' refs/remotes/"$GKB_REMOTE" |
      grep -Ev "$GKB_REMOTE/($GKB_EXCLUDE_BRANCHES)" | head -n 1)
  fi

  if [[ -z "$BRANCH" ]]; then
    echo "No remote branches found matching the specified criteria."
    echo "Available remote branches are:"
    git branch -r
    echo ""
    read -rp "Do you want to create a new local branch? (y/n): " CREATE_BRANCH
    if [[ "$CREATE_BRANCH" == "y" ]]; then
      read -rp "Enter the name of the new branch: " NEW_BRANCH
      BRANCH="$NEW_BRANCH"
      echo "Select the base branch to create '$BRANCH' from:"
      echo "1) main"
      echo "2) current branch ($(git rev-parse --abbrev-ref HEAD))"
      read -rp "Enter your choice (1 or 2): " BASE_CHOICE
      if [[ "$BASE_CHOICE" == "1" ]]; then
        BASE_BRANCH="$GKB_REMOTE/main"
      elif [[ "$BASE_CHOICE" == "2" ]]; then
        BASE_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
      else
        echo "Invalid choice. Operation canceled."
        exit 1
      fi
    else
      echo "Operation canceled."
      exit 1
    fi
  else
    BRANCH="${BRANCH#"$GKB_REMOTE/"}"
  fi
}

# === Check for Uncommitted Changes ===
check_uncommitted_changes() {
  CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
  if [ "$CURRENT_BRANCH" != "$BRANCH" ]; then
    if ! git diff-index --quiet HEAD --; then
      if [ "$FORCE" = true ]; then
        echo "Warning: You have uncommitted changes, but proceeding due to force option."
      else
        echo "Warning: You have uncommitted changes."
        read -rp "Switching branches may result in data loss. Do you want to continue? (y/n): " PROCEED
        if [[ "$PROCEED" != "y" ]]; then
          echo "Operation canceled."
          exit 1
        fi
      fi
    fi
  fi
}

# === Switch to Branch ===
switch_to_branch() {
  if git show-ref --verify --quiet "refs/heads/$BRANCH"; then
    if ! git checkout "$BRANCH"; then
      echo "Error: Failed to check out the branch '$BRANCH'."
      exit 1
    fi
    if $SYNC; then
      if ! git pull "$GKB_REMOTE" "$BRANCH"; then
        echo "Error: Failed to update the branch '$BRANCH' from remote."
        exit 1
      fi
    fi
    echo "Switched to the local branch '$BRANCH' (updated)."
  else
    # Check if the branch exists remotely
    if git ls-remote --exit-code --heads "$GKB_REMOTE" "$BRANCH" &>/dev/null; then
      # Create the local branch from remote
      if git checkout -b "$BRANCH" "$GKB_REMOTE/$BRANCH"; then
        echo "Switched to the new branch '$BRANCH' created from remote."
      else
        echo "Error: Failed to create the new branch '$BRANCH' from remote."
        exit 1
      fi
    else
      # Create the local branch from the selected base branch
      if git checkout -b "$BRANCH" "$BASE_BRANCH"; then
        echo "Branch '$BRANCH' does not exist remotely. Created new local branch '$BRANCH' from '$BASE_BRANCH'."
      else
        echo "Error: Failed to create the new branch '$BRANCH' from '$BASE_BRANCH'."
        exit 1
      fi
    fi
  fi
}

# === Main Execution Flow ===
main() {
  load_config
  parse_options "$@"
  check_remote_access
  fetch_updates
  prune_branches
  determine_branch_name
  check_uncommitted_changes
  switch_to_branch
}

main "$@"